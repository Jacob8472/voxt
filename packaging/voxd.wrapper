#!/usr/bin/env bash
set -euo pipefail

APPDIR=/opt/voxd

# Ensure ydotool picks up our user-scoped socket (matches our user service)
export YDOTOOL_SOCKET="${YDOTOOL_SOCKET:-$HOME/.ydotool_socket}"

# Ensure user-local bin is on PATH so ~/.local/bin tools are found
export PATH="$HOME/.local/bin:$PATH"

if [[ -x "$APPDIR/.venv/bin/python" ]]; then
  PY="$APPDIR/.venv/bin/python"
else
  PY="$(command -v python3 || command -v python)"
fi

# Guard against too-old system Python (e.g., Leap 15.x ships 3.6)
if [[ "$PY" != "$APPDIR/.venv/bin/python" ]]; then
  ver="$($PY - <<'PY'
import sys
print(f"{sys.version_info.major}.{sys.version_info.minor}")
PY
)"
  case "$ver" in
    3.9|3.10|3.11|3.12|3.13) : ;;
    *)
      echo "[voxd] System Python $ver is unsupported. Please reinstall using 'bash packaging/install_voxd.sh <rpm>' to provision a newer Python, or create a venv at $APPDIR/.venv." >&2
      exit 1
      ;;
  esac
fi

# Ensure Python can import the embedded source tree
export PYTHONPATH="$APPDIR/src${PYTHONPATH:+:$PYTHONPATH}"

# If the managed venv exists, prefer it entirely to guarantee deps
if [[ -x "$APPDIR/.venv/bin/python" ]]; then
  PY="$APPDIR/.venv/bin/python"
  export PYTHONPATH="$APPDIR/src${PYTHONPATH:+:$PYTHONPATH}"
fi

# First-run per-user setup if config missing
CFG_FILE="${XDG_CONFIG_HOME:-$HOME/.config}/voxd/config.yaml"
if [[ ! -f "$CFG_FILE" ]]; then
  "$PY" -m voxd --setup || true
fi

# After setup, (Wayland) ensure ydotoold user service is enabled/started
if [[ ${XDG_SESSION_TYPE:-} == wayland* ]]; then
  systemctl --user is-active --quiet ydotoold.service || systemctl --user enable --now ydotoold.service || true
fi

exec "$PY" -m voxd "$@"


