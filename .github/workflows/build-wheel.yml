name: Build & publish wheels

on:
  push:
    tags: ["v*"]         # publish only on version tags
  workflow_dispatch:      # or manual trigger

env:
  PYTHON_VERSION: "3.12"

jobs:
###############################################################################
# 1 ────────────────────────────────────────────────────────── build wheels  ──#
###############################################################################
  wheel:
    name: wheel (${{ matrix.plat }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        plat: [manylinux_2_17_x86_64, manylinux_2_17_aarch64]

    steps:
    # ── check out the tag ────────────────────────────────────────────────────
    - uses: actions/checkout@v4

    # ── system deps (cmake, ninja, compilers, …) ─────────────────────────────
    - name: Install build toolchain
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build \
             gcc-aarch64-linux-gnu g++-aarch64-linux-gnu crossbuild-essential-arm64
      if: matrix.plat == 'manylinux_2_17_aarch64'

    - name: Install build toolchain (x86 only)
      run: sudo apt-get update && sudo apt-get install -y build-essential cmake ninja-build
      if: matrix.plat == 'manylinux_2_17_x86_64'

    # ── build whisper.cpp once per arch; copy the binary into package dir ────
    - name: Build whisper.cpp
      run: |
        git clone --depth 1 https://github.com/ggml-org/whisper.cpp.git
        mkdir -p build
        cmake -S whisper.cpp -B build -DCMAKE_BUILD_TYPE=Release
        cmake --build build -j"$(nproc)"
        dst="src/whisp_cpp_runtime/bin/linux_${{ matrix.plat }}"
        mkdir -p "$dst"
        cp build/bin/whisper-cli "$dst/"
        chmod +x "$dst/whisper-cli"

    # ── python build requirements ────────────────────────────────────────────
    - name: Install Python build deps
      run: |
        python -m pip install --upgrade pip
        python -m pip install --upgrade build hatchling

    # ── build the wheel & rename with platform tag ───────────────────────────
    - name: Build wheel and tag with platform
      run: |
        python -m build --wheel --no-isolation
        WHEEL=$(ls dist/*.whl)
        mv "$WHEEL" "${WHEEL/.whl/}-${{ matrix.plat }}.whl"

    # ── upload artefact (one wheel per artefact) ─────────────────────────────
    - uses: actions/upload-artifact@v4
      with:
        name: whisp-linux_${{ matrix.plat }}
        path: dist/*.whl
        retention-days: 7

###############################################################################
# 2 ──────────────────────────────────────────────────────────── publish  ────#
###############################################################################
  publish:
    needs: wheel
    runs-on: ubuntu-latest

    steps:
    - uses: actions/download-artifact@v4
      with:
        path: dist                     # no merge-multiple

    - name: Show wheels
      run: ls -lh dist

    - name: Install & run Twine check
      run: |
        python -m pip install --upgrade pip
        python -m pip install twine==6.1.0
        python -m twine check dist/*.whl

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@v1.8.12
      with:
        user: __token__
        password: ${{ secrets.PYPI_TOKEN }}
        packages-dir: dist
        skip-existing: true            # idempotent
        verify-metadata: true
