name: Build & Publish wheels

on:
  push:
    tags: ["v*"]          # publish only on version tags (v0.1.0, v0.1.1, …)
  pull_request:           # build wheels for PRs
  workflow_dispatch:

permissions:
  contents: read          # allow checkout
  id-token: write         # OIDC token for PyPI

concurrency:
  group: build-wheels-${{ github.ref }}
  cancel-in-progress: true

jobs:
# ──────────────────────────────────────────────────────────────
# 1) wheel   – build x86_64 + aarch64 wheels, upload artefacts
# 2) publish – download artefacts, twine upload (tags only)
# ──────────────────────────────────────────────────────────────
  wheel:
    name: wheel (${{ matrix.arch }})
    runs-on: ubuntu-24.04
    strategy:
      matrix: {arch: [x86_64, aarch64]}

    env:
      TAG_X86_64: manylinux_2_17_x86_64
      TAG_AARCH64: manylinux_2_17_aarch64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: System deps
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build
          if [ "${{ matrix.arch }}" = "aarch64" ]; then
            sudo apt-get install -y \
                 gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
                 crossbuild-essential-arm64
          fi

      - name: Fetch whisper.cpp
        run: git clone --depth 1 https://github.com/ggml-org/whisper.cpp.git

      - name: Patch “-march=native” for ARM
        if: matrix.arch == 'aarch64'
        run: |
          grep -Rl -- '-march=native' whisper.cpp/ggml | \
            xargs sed -i 's/-march=native/-march=armv8-a/g'

      - name: Build whisper.cpp
        run: |
          mkdir -p build
          if [ "${{ matrix.arch }}" = "aarch64" ]; then
            cmake -S whisper.cpp -B build \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_SYSTEM_NAME=Linux \
              -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
              -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
              -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ \
              -DCMAKE_C_FLAGS='-march=armv8-a' \
              -DCMAKE_CXX_FLAGS='-march=armv8-a'
          else
            cmake -S whisper.cpp -B build -DCMAKE_BUILD_TYPE=Release
          fi
          cmake --build build -j"$(nproc)"

      - name: Stage CLI binary in package
        run: |
          dst="src/whisp_cpp_runtime/bin/linux_${{ matrix.arch }}"
          mkdir -p "$dst"
          cp build/bin/whisper-cli "$dst/"
          chmod +x "$dst/whisper-cli"

      # ---- install build backend so --no-isolation is not needed
      - name: Install Python build tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade build hatchling

      - name: Build wheel
        run: |
          PLAT="${{ env.TAG_X86_64 }}"
          if [ "${{ matrix.arch }}" = "aarch64" ]; then
            PLAT="${{ env.TAG_AARCH64 }}"
          fi
          python -m build --wheel --no-isolation \
                 --config-setting="--build-option=--plat-name=$PLAT"
          twine check dist/*.whl
          ls -lh dist

      - name: Upload artefact
        uses: actions/upload-artifact@v4
        with:
          name: whisp-linux_${{ matrix.arch }}
          path: dist/*.whl
          if-no-files-found: error

  publish:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: wheel
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          pattern: whisp-linux_*
          path: dist                # wheels land directly here
          merge-multiple: true

      - name: Final sanity-check with latest Twine
        run: |
          python -m pip install --upgrade twine
          twine check dist/*.whl
          ls -lh dist

      - name: Upload to PyPI (OIDC)
        uses: pypa/gh-action-pypi-publish@release/v1   # ← newest image
        with:
          packages-dir: dist
          verify-metadata: true        # safe again on Twine ≥ 6
          skip-existing: false
