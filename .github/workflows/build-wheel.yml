name: Build & Publish wheels

on:
  push:
    tags: ['v*']          # publish on version tags (v0.1.0 …)
  pull_request:           # build wheels for PRs
  workflow_dispatch:

concurrency:
  group: build-wheels-${{ github.ref }}
  cancel-in-progress: true

jobs:
# ────────────────────────────────────────────────────────────────
# 1) build → wheels for x86_64 + aarch64 → upload as artefacts
# 2) publish → download wheels → twine upload     (only on tag)
# ────────────────────────────────────────────────────────────────
  wheel:
    name: wheel (${{ matrix.arch }})
    runs-on: ubuntu-24.04

    strategy:
      matrix: { arch: [x86_64, aarch64] }

    steps:
    # -----------------------------------------------------------
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: System dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build
        if [ "${{ matrix.arch }}" = "aarch64" ]; then
          sudo apt-get install -y \
               gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
               crossbuild-essential-arm64
        fi

    - name: Fetch whisper.cpp (runtime)
      run: git clone --depth 1 https://github.com/ggml-org/whisper.cpp.git

    - name: Patch “-march=native” for ARM build
      if: matrix.arch == 'aarch64'
      run: |
        grep -Rl -- '-march=native' whisper.cpp/ggml | \
          xargs sed -i 's/-march=native/-march=armv8-a/g'

    - name: Build whisper.cpp
      run: |
        mkdir -p build
        if [ "${{ matrix.arch }}" = "aarch64" ]; then
          cmake -S whisper.cpp -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_SYSTEM_NAME=Linux \
            -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
            -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
            -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ \
            -DCMAKE_C_FLAGS='-march=armv8-a' \
            -DCMAKE_CXX_FLAGS='-march=armv8-a'
        else
          cmake -S whisper.cpp -B build -DCMAKE_BUILD_TYPE=Release
        fi
        cmake --build build -j"$(nproc)"

    - name: Stage CLI binary into package
      run: |
        dst="src/whisp_cpp_runtime/bin/linux_${{ matrix.arch }}"
        mkdir -p "$dst"
        cp build/bin/whisper-cli "$dst/"
        chmod +x "$dst/whisper-cli"

    - name: Build wheel
      run: |
        if [ "${{ matrix.arch }}" = "x86_64" ]; then
          plat="--config-setting=--plat-name=manylinux_2_17_x86_64"
        else
          plat="--config-setting=--plat-name=manylinux_2_17_aarch64"
        fi
        pipx run build --wheel $plat
        pipx run twine check dist/*.whl
        ls -lh dist

    - name: Upload wheel artefact
      uses: actions/upload-artifact@v4
      with:
        name: whisp-linux_${{ matrix.arch }}
        path: dist/*.whl
        if-no-files-found: error

# ────────────────────────────────────────────────────────────────
  publish:
    if: startsWith(github.ref, 'refs/tags/v')   # only on tagged pushes
    needs: wheel
    runs-on: ubuntu-24.04
    permissions:
      id-token: write        # for PyPI Trusted Publisher (optional)
      contents:  read

    steps:
    # -----------------------------------------------------------
    - name: Download wheel artefacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true     # <── wheels are dropped straight into…
        path: dist               # …this directory

    - name: List & double-check wheels
      run: |
        ls -lh dist
        pipx run twine check dist/*.whl

    # -----------------------------------------------------------
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@v1.8.12
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages-dir: dist
        verify-metadata: true
        skip-existing: false
