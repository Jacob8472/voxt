name: Build wheels

on:
  push:
    tags: [ 'v*' ]        # publish wheels on version tags
  pull_request:
  workflow_dispatch:

concurrency:
  group: build-wheels-${{ github.ref }}
  cancel-in-progress: true

jobs:
  wheel:
    name: wheel (${{ matrix.arch }})
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        arch: [ x86_64, aarch64 ]

    steps:
    # ────────────────────────────────────────────────────────────────
    - name: Checkout repo
      uses: actions/checkout@v4

    # ────────────────────────────────────────────────────────────────
    - name: System dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build
        if [ "${{ matrix.arch }}" = "aarch64" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
                                   crossbuild-essential-arm64
        fi

    # ────────────────────────────────────────────────────────────────
    - name: Fetch whisper.cpp (runtime)
      run: git clone --depth 1 https://github.com/ggml-org/whisper.cpp.git

    # ────────────────────────────────────────────────────────────────
    - name: Patch out “-march=native” when cross-compiling
      if: matrix.arch == 'aarch64'
      run: |
        # Any occurrence of -march=native upsets the cross compiler.
        grep -Rl -- '-march=native' whisper.cpp/ggml | \
          xargs sed -i 's/-march=native/-march=armv8-a/g'

    # ────────────────────────────────────────────────────────────────
    - name: Configure & build whisper.cpp
      run: |
        mkdir -p build
        if [ "${{ matrix.arch }}" = "aarch64" ]; then
          cmake -S whisper.cpp -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_SYSTEM_NAME=Linux \
            -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
            -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
            -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ \
            -DCMAKE_C_FLAGS='-march=armv8-a' \
            -DCMAKE_CXX_FLAGS='-march=armv8-a'
        else
          cmake -S whisper.cpp -B build -DCMAKE_BUILD_TYPE=Release
        fi

        cmake --build build -j$(nproc)

    # ────────────────────────────────────────────────────────────────
    - name: Stage CLI binary inside Python package
      run: |
        dst="src/whisp_cpp_runtime/bin/linux_${{ matrix.arch }}"
        mkdir -p "$dst"
        cp build/bin/whisper-cli "$dst/"
        chmod +x "$dst/whisper-cli"

    # ────────────────────────────────────────────────────────────────
    - name: Build wheel
      run: |
        pipx run build --wheel
        ls dist

    # ────────────────────────────────────────────────────────────────
    - name: Upload wheel artifact
      uses: actions/upload-artifact@v4
      with:
        name: whisp-linux_${{ matrix.arch }}
        path: dist/*.whl
