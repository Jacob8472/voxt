name: Build & Publish wheels

on:
  push:
    tags: ['v*']            # publish on version tags (v0.1.0 …)
  pull_request:             # build wheels for PRs so we know they compile
  workflow_dispatch:

# one run per ref; if you re-push the same tag the old run is cancelled
concurrency:
  group: build-wheels-${{ github.ref }}
  cancel-in-progress: true

jobs:
# ──────────────────────────────────────────────────────────────────────
# 1.  build →   wheels for x86_64 and aarch64  →  upload as artifacts
# 2.  publish → download those artifacts       →  twine upload
# ──────────────────────────────────────────────────────────────────────
  wheel:
    name: wheel (${{ matrix.arch }})
    runs-on: ubuntu-24.04

    strategy:
      matrix:
        arch: [x86_64, aarch64]

    steps:

    - name: Checkout repo
      uses: actions/checkout@v4

    # ---------------------------------------------------------------
    # Build deps
    - name: System dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build
        if [ "${{ matrix.arch }}" = "aarch64" ]; then
          sudo apt-get install -y \
               gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
               crossbuild-essential-arm64
        fi

    # ---------------------------------------------------------------
    # Pull the C/C++ runtime
    - name: Fetch whisper.cpp (runtime)
      run: git clone --depth 1 https://github.com/ggml-org/whisper.cpp.git

    # ---------------------------------------------------------------
    # Patch −march=native when we cross-compile for ARM
    - name: Patch out “-march=native” for ARM job
      if: matrix.arch == 'aarch64'
      run: |
        grep -Rl -- '-march=native' whisper.cpp/ggml | \
          xargs sed -i 's/-march=native/-march=armv8-a/g'

    # ---------------------------------------------------------------
    # Configure & build whisper.cpp
    - name: Build whisper.cpp
      run: |
        mkdir -p build
        if [ "${{ matrix.arch }}" = "aarch64" ]; then
          cmake -S whisper.cpp -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_SYSTEM_NAME=Linux \
            -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
            -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
            -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ \
            -DCMAKE_C_FLAGS='-march=armv8-a' \
            -DCMAKE_CXX_FLAGS='-march=armv8-a'
        else
          cmake -S whisper.cpp -B build -DCMAKE_BUILD_TYPE=Release
        fi
        cmake --build build -j"$(nproc)"

    # ---------------------------------------------------------------
    # Stage binary into the Python package
    - name: Stage CLI binary
      run: |
        dst="src/whisp_cpp_runtime/bin/linux_${{ matrix.arch }}"
        mkdir -p "$dst"
        cp build/bin/whisper-cli "$dst/"
        chmod +x "$dst/whisper-cli"
    
    # ---------------------------------------------------------------
    # Build the wheel – give it a platform-specific tag so
    # filenames are unique and don’t collide later
    - name: Build wheel
      run: |
        if [ "${{ matrix.arch }}" = "x86_64" ]; then
          plat="--config-setting=--plat-name=manylinux_2_17_x86_64"
        else
          plat="--config-setting=--plat-name=manylinux_2_17_aarch64"
        fi

        pipx run build --wheel $plat
        pipx run twine check dist/*.whl
        ls -l dist

    # ---------------------------------------------------------------
    # Upload each wheel as an artifact
    - name: Upload wheel artifact
      uses: actions/upload-artifact@v4
      with:
        name: whisp-linux_${{ matrix.arch }}
        path: dist/*.whl

# ─────────────────────────────────────────────────────────────────────
  publish:
    if: startsWith(github.ref, 'refs/tags/v') # only on tag pushes
    needs: wheel
    runs-on: ubuntu-24.04
    permissions:
      id-token: write    # (optional) for future Trusted-Publisher flows
      contents: read

    steps:
      # ---------------------------------------------------------------
      # 1. Download every wheel artifact into dist-collect/
      - name: Download wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist-collect                # keep default directory layout

      # ---------------------------------------------------------------
      # 2. Flatten the directory → dist/
      - name: Collect wheels into dist/
        run: |
          mkdir -p dist
          find dist-collect -name '*.whl' -exec mv {} dist/ \;

      # (optional) show what was grabbed
      - name: List wheels
        run: ls -l dist

      # ---------------------------------------------------------------
      # 3. Upload to PyPI
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.8.12
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: dist           # <── flattened dir
          verify-metadata: true        # (default; keeps twine check)
