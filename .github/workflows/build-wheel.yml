name: Build & Publish wheels

on:
  push:
    tags: ['v*']            # publish on version tags (v0.1.0 …)
  pull_request:             # build wheels for PRs
  workflow_dispatch:

# Global permissions — enable OIDC for PyPI Trusted Publishing
permissions:
  contents: read
  id-token: write

concurrency:
  group: build-wheels-${{ github.ref }}
  cancel-in-progress: true

jobs:
# ────────────────────────────────────────────────────────────────
# 1) wheel   → build x86_64 + aarch64 wheels, upload artefacts
# 2) publish → download wheels, twine check, Trusted-upload to PyPI
# ────────────────────────────────────────────────────────────────
  wheel:
    name: wheel (${{ matrix.arch }})
    runs-on: ubuntu-24.04

    strategy:
      matrix:
        arch: [x86_64, aarch64]

    steps:
    # -----------------------------------------------------------
    - uses: actions/checkout@v4

    - name: System dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build
        if [ "${{ matrix.arch }}" = "aarch64" ]; then
          sudo apt-get install -y \
               gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
               crossbuild-essential-arm64
        fi

    - name: Fetch whisper.cpp (runtime)
      run: git clone --depth 1 https://github.com/ggml-org/whisper.cpp.git

    - name: Patch “-march=native” for ARM build
      if: matrix.arch == 'aarch64'
      run: |
        grep -Rl -- '-march=native' whisper.cpp/ggml | \
          xargs sed -i 's/-march=native/-march=armv8-a/g'

    - name: Build whisper.cpp
      run: |
        mkdir -p build
        if [ "${{ matrix.arch }}" = "aarch64" ]; then
          cmake -S whisper.cpp -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_SYSTEM_NAME=Linux \
            -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
            -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
            -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ \
            -DCMAKE_C_FLAGS='-march=armv8-a' \
            -DCMAKE_CXX_FLAGS='-march=armv8-a'
        else
          cmake -S whisper.cpp -B build -DCMAKE_BUILD_TYPE=Release
        fi
        cmake --build build -j"$(nproc)"

    - name: Stage CLI binary into package
      run: |
        dst="src/whisp_cpp_runtime/bin/linux_${{ matrix.arch }}"
        mkdir -p "$dst"
        cp build/bin/whisper-cli "$dst/"
        chmod +x "$dst/whisper-cli"

    - name: Build wheel (adds proper platform tag)
      env:
        TAG_X86_64: manylinux_2_17_x86_64
        TAG_AARCH64: manylinux_2_17_aarch64
      run: |
        if [ "${{ matrix.arch }}" = "x86_64" ]; then
          PLAT="$TAG_X86_64"
        else
          PLAT="$TAG_AARCH64"
        fi
        # --build-option is honoured by the setuptools backend
        python -m build --wheel --no-isolation \
          --config-setting="--build-option=--plat-name=$PLAT"
        python -m pip install --upgrade twine
        twine check dist/*.whl
        ls -lh dist

    - name: Upload wheel artefact
      uses: actions/upload-artifact@v4
      with:
        name: whisp-linux_${{ matrix.arch }}
        path: dist/*.whl
        if-no-files-found: error

# ────────────────────────────────────────────────────────────────
  publish:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: wheel
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      id-token: write   # PyPI Trusted Publishing

    steps:
    # -----------------------------------------------------------
    - name: Download wheel artefacts
      uses: actions/download-artifact@v4
      with:
        merge-multiple: true   # wheels land side-by-side in dist/
        path: dist

    - name: List & double-check wheels
      run: |
        ls -lh dist
        python -m pip install --upgrade twine
        twine check dist/*.whl

    - name: Publish to PyPI (Trusted Publisher)
      uses: pypa/gh-action-pypi-publish@v1.8.12
      with:
        packages-dir: dist
        verify-metadata: true
        skip-existing: false    # fail if the version already exists
        # no user/password needed – OIDC token is exchanged automatically
