name: Release packages

on:
  workflow_dispatch:
    inputs:
      version:
        description: "SemVer version (e.g., 1.3.1)"
        required: true
      prerelease:
        description: "Mark as prerelease"
        required: false
        default: "false"

permissions:
  contents: write

jobs:
  build:
    name: Build packages (${{ matrix.arch }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm64]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go (for nfpm)
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Install nfpm
        run: |
          go install github.com/goreleaser/nfpm/v2/cmd/nfpm@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Prepare dist dir
        run: mkdir -p dist

      - name: Build packages
        env:
          VERSION: ${{ startsWith(github.event.inputs.version, 'v') && slice(github.event.inputs.version, 1, 100) || github.event.inputs.version }}
          ARCH: ${{ matrix.arch }}
        run: |
          nfpm pkg --packager deb       -f packaging/nfpm.yaml --target dist/
          nfpm pkg --packager rpm       -f packaging/nfpm.yaml --target dist/
          nfpm pkg --packager archlinux -f packaging/nfpm.yaml --target dist/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: voxd-${{ startsWith(github.event.inputs.version, 'v') && slice(github.event.inputs.version, 1, 100) || github.event.inputs.version }}-${{ matrix.arch }}
          path: dist/*

  release:
    name: Create GitHub Release and upload assets
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create/Update Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ startsWith(github.event.inputs.version, 'v') && github.event.inputs.version || format('v{0}', github.event.inputs.version) }}
          name: VOXD ${{ startsWith(github.event.inputs.version, 'v') && github.event.inputs.version || format('v{0}', github.event.inputs.version) }}
          prerelease: ${{ github.event.inputs.prerelease }}
          files: |
            dist/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

